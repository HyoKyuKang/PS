#include<bits/stdc++.h>
#define double long double
using namespace std;
double eps = -1e12;
using ll = long long;


//23270 AC
vector<double> gauss_mod(vector<vector<double>>& a) {

	int n = a.size();
	int m = a[0].size();
	vector<int> w(m, -1); // i번째 열에 있는 pivot이 몇 번째 행에 있는지 저장
	for (int c = 0, r = 0; c < m && r < n; ++c) {
		int p = r; // pivot row
		for (int i = r; i < n; ++i)
			if (a[p][c] < a[i][c])
				p = i;
		if (abs(a[p][c] - 0) < eps) continue; // free variable

		for (int j = 0; j < m; ++j)
			swap(a[p][j], a[r][j]);
		w[c] = r;

		double t = a[r][c];
		for (int j = 0; j < m; ++j)
			a[r][j] = a[r][j] / t;

		for (int i = 0; i < n; ++i) if (i != r) {
			double t = a[i][c];
			for (int j = c; j < m; ++j)
				a[i][j] = a[i][j] - a[r][j] * t;
		}
		++r;
	}

	// existence of solution
	for (int i = 0; i < n; ++i)
		if (count(a[i].begin(), --a[i].end(), 0) == m - 1 && a[i][m - 1])
			return vector<double>(); // no solution

	vector<double> ans(m);
	for (int i = 0; i < m; ++i)
		if (~w[i]) ans[i] = a[w[i]][m - 1];
	return ans; // solution exist
}
ll n, k, x, a, b;
double pr;
int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0), cout.tie(0);
	cin >> n >> k >> pr;
	vector<vector<double>>now;
	x = (1 << n);
	for (int i = 0; i < (1 << n); i++) {
		int cnt = 0;
		vector<double>T;
		for (int j = 0; j < n; j++) {
			if (i&(1 << j))cnt++;
		}
		T.resize((1 << n) +1 );
		if (cnt == k) {
			T[i] = 1;
		}
		else {
			a = i * 2 + 1;
			b = i * 2;
			if (a >= x)a -= x;
			if (b >= x)b -= x;
			if (i == 7)
				i = i;
			T[i] += 1;
			T[a] -= pr;
			T[b] -= 1.0 - pr;
			T[(1 << n)] = -1;
		}
		now.push_back(T);
	}


	cout << fixed;
	cout.precision(13);
	cout << -gauss_mod(now)[0];
	auto ret = gauss_mod(now);
	//for (auto nxt : ret)cout << nxt << endl;
}
